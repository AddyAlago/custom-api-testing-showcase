name: API Tests (API + Allure Artifacts)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite: [smoke, regression, contract, negative]
    env:
      BASE_URL: http://localhost:8000
      API_TOKEN: secret-token

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build mock API
        run: |
          docker build -t mock-api ./apps/mock_api
          docker run -d --rm -p 8000:8000 --name mock-api \
            -e REQUIRED_BEARER=secret-token \
            mock-api uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000
          # Wait until health endpoint returns 200
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$status" = "200" ]; then echo "API is up"; break; fi; sleep 1; done
          test "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)" = "200"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests (${{ matrix.suite }}) with Allure output
        run: |
          mkdir -p allure-results/${{ matrix.suite }}
          if [ "${{ matrix.suite }}" = "negative" ]; then
            pytest tests/negative --alluredir=allure-results/${{ matrix.suite }}
          else
            pytest -m ${{ matrix.suite }} --alluredir=allure-results/${{ matrix.suite }}
          fi
          # Add environment metadata for the merged report
          echo "SUITE=API" >> allure-results/${{ matrix.suite }}/environment.properties
          echo "SUBSUITE=${{ matrix.suite }}" >> allure-results/${{ matrix.suite }}/environment.properties
          echo "BASE_URL=${BASE_URL}" >> allure-results/${{ matrix.suite }}/environment.properties

      - name: Upload Allure results (per suite)
        uses: actions/upload-artifact@v4
        with:
          name: allure-api-${{ matrix.suite }}
          path: allure-results/${{ matrix.suite }}

  performance:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://localhost:8000
    steps:
      - uses: actions/checkout@v4
      - name: Build & run mock API
        run: |
          docker build -t mock-api ./apps/mock_api
          docker run -d --rm -p 8000:8000 --name mock-api mock-api \
            uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$status" = "200" ]; then echo "API is up"; break; fi; sleep 1; done
          test "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)" = "200"
      - name: Set up k6
        uses: grafana/setup-k6-action@v1
      - name: k6 smoke
        run: k6 run performance/smoke.js --env BASE_URL=http://localhost:8000
      - name: Upload k6 summary
        if: always()
        run: |
          echo "k6 smoke completed" > k6-summary.txt

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build & run mock API
        run: |
          docker build -t mock-api ./apps/mock_api
          docker run -d --rm -p 8000:8000 --name mock-api mock-api \
            uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$code" = "200" ]; then echo "API is up"; break; fi; sleep 1; done
          test "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)" = "200"

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull ZAP image with retries and fallback
        id: pullzap
        shell: bash
        run: |
          set -e
          ZAP_IMG=""
          imgs=("ghcr.io/zaproxy/zaproxy:stable" "zaproxy/zap-stable")
          for img in "${imgs[@]}"; do
            echo "Trying to pull $img ..."
            for i in {1..5}; do
              if docker pull "$img" -q; then
                echo "Pulled $img"
                ZAP_IMG="$img"                     # set for THIS step
                echo "ZAP_IMG=$img" >> $GITHUB_ENV  # set for NEXT steps
                break 2
              fi
              echo "Pull failed, retry $i/5..."
              sleep 5
            done
          done
          if [ -z "$ZAP_IMG" ]; then
            echo "Failed to pull any ZAP image";
            exit 1;
          fi

      - name: Run ZAP Baseline (non-blocking)
        continue-on-error: true
        run: |
          set -e
          mkdir -p zap
          echo "Using ZAP image: $ZAP_IMG"
          # Run ZAP baseline against the local docs (OpenAPI UI)
          docker run --rm --network host -v "$PWD/zap:/zap/wrk" "$ZAP_IMG" \
            zap-baseline.py -t http://localhost:8000/docs \
            -J report_json.json -w report_md.md -r report_html.html -a || true
          # Ensure artifacts exist even if ZAP didn't generate them (e.g., flaky pull/network)
          [ -f zap/report_html.html ] || echo "ZAP did not generate HTML report. Target may have been unreachable or scan aborted." > zap/README.txt
          [ -f zap/report_json.json ] || touch zap/report_json.json
          [ -f zap/report_md.md ]    || touch zap/report_md.md
          ls -la zap || true

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sec-zap
          path: zap

      - name: Add ZAP findings to job summary
        if: always()
        run: |
          echo "## 🔐 ZAP Baseline Findings" >> $GITHUB_STEP_SUMMARY
          if [ -s zap/report_md.md ]; then
            cat zap/report_md.md >> $GITHUB_STEP_SUMMARY
          else
            echo "_No ZAP report found (scan skipped or target unreachable)._" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Prepare site folder
        if: always()
        run: |
          mkdir -p site/zap
          if [ -f zap/report_html.html ]; then
            cp zap/report_html.html site/zap/index.html
          else
            echo "<h1>ZAP</h1><p>No report in this run.</p>" > site/zap/index.html
          fi

      - name: Deploy ZAP report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          keep_files: true

  add-readme-snippet:
    runs-on: ubuntu-latest
    steps:
      - name: Add README snippet suggestion
        run: |
          echo '### Security' >> $GITHUB_STEP_SUMMARY
          echo '[![Security Scan](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/api-tests.yml?label=security&logo=github)](https://github.com/${{ github.repository }}/actions/workflows/api-tests.yml)' >> $GITHUB_STEP_SUMMARY
          echo '_The **Security** job runs an OWASP ZAP Baseline scan on every push/PR. See the job summary for current findings, download the artifact, or view the latest [ZAP report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/zap/)._ ' >> $GITHUB_STEP_SUMMARY
