name: API Tests (API + Allure Artifacts)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite: [smoke, regression, contract, negative]
    env:
      BASE_URL: http://localhost:8000
      API_TOKEN: secret-token

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build mock API
        run: |
          docker build -t mock-api ./apps/mock_api
          docker run -d --rm -p 8000:8000 --name mock-api \
            -e REQUIRED_BEARER=secret-token \
            mock-api uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000
          # Wait until health endpoint returns 200
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$status" = "200" ]; then echo "API is up"; break; fi; sleep 1; done
          test "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)" = "200"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests (${{ matrix.suite }}) with Allure output
        run: |
          mkdir -p allure-results/${{ matrix.suite }}
          if [ "${{ matrix.suite }}" = "negative" ]; then
            pytest tests/negative --alluredir=allure-results/${{ matrix.suite }}
          else
            pytest -m ${{ matrix.suite }} --alluredir=allure-results/${{ matrix.suite }}
          fi
          # Add environment metadata for the merged report
          echo "SUITE=API" >> allure-results/${{ matrix.suite }}/environment.properties
          echo "SUBSUITE=${{ matrix.suite }}" >> allure-results/${{ matrix.suite }}/environment.properties
          echo "BASE_URL=${BASE_URL}" >> allure-results/${{ matrix.suite }}/environment.properties

      - name: Upload Allure results (per suite)
        uses: actions/upload-artifact@v4
        with:
          name: allure-api-${{ matrix.suite }}
          path: allure-results/${{ matrix.suite }}

  performance:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://localhost:8000
    steps:
      - uses: actions/checkout@v4
      - name: Build & run mock API
        run: |
          docker build -t mock-api ./apps/mock_api
          docker run -d --rm -p 8000:8000 --name mock-api mock-api \
            uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000
          for i in {1..30}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$status" = "200" ]; then echo "API is up"; break; fi; sleep 1; done
          test "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)" = "200"
      - name: Set up k6
        uses: grafana/setup-k6-action@v1
      - name: k6 smoke
        run: k6 run performance/smoke.js --env BASE_URL=http://localhost:8000
      - name: Upload k6 summary
        if: always()
        run: |
          echo "k6 smoke completed" > k6-summary.txt

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build & run mock API
        run: |
          docker build -t mock-api ./apps/mock_api
          docker run -d --rm -p 8000:8000 --name mock-api mock-api \
            uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$code" = "200" ]; then echo "API is up"; break; fi; sleep 1; done
          test "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)" = "200"

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull ZAP image with retries and fallback
        id: pullzap
        shell: bash
        run: |
          set -e
          imgs=("ghcr.io/zaproxy/zaproxy:stable" "zaproxy/zap-stable")
          for img in "${imgs[@]}"; do
            echo "Trying to pull $img ..."
            for i in {1..5}; do
              if docker pull "$img" -q; then
                echo "ZAP_IMG=$img" >> $GITHUB_ENV
                echo "Pulled $img"
                break 2
              fi
              echo "Pull failed, retry $i/5..."
              sleep 5
            done
          done
          test -n "$ZAP_IMG" || (echo "Failed to pull any ZAP image" && exit 1)

      - name: Run ZAP Baseline (non-blocking)
        continue-on-error: true
        run: |
          mkdir -p zap
          docker run --rm --network host -v "$PWD/zap:/zap/wrk" "$ZAP_IMG" \
            zap-baseline.py -t http://localhost:8000/docs \
            -J report_json.json -w report_md.md -r report_html.html -a || true
          ls -la zap || true

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sec-zap
          path: zap