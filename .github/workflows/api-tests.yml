name: API Tests (API + Allure Artifacts)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite: [smoke, regression, contract, negative]
    env:
      BASE_URL: http://localhost:8000
      API_TOKEN: secret-token
      PYTHONDONTWRITEBYTECODE: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/apps/mock_api/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (repo + mock API)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f apps/mock_api/requirements.txt ]; then pip install -r apps/mock_api/requirements.txt; fi
          # FastAPI/uvicorn if your mock_api needs them but isn't pinned:
          python - <<'PY'
          import pkgutil, sys, subprocess
          for m in ["uvicorn", "fastapi"]:
              if not pkgutil.find_loader(m):
                  subprocess.check_call([sys.executable, "-m", "pip", "install", m])
          PY

      - name: Launch mock API (no Docker)
        env:
          REQUIRED_BEARER: ${{ env.API_TOKEN }}
        run: |
          nohup uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000 >/tmp/mock_api.log 2>&1 &
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health || true)
            if [ "$code" = "200" ]; then echo "API is up"; break; fi
            sleep 1
          done
          test "$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health)" = "200"

      - name: Run tests (${{ matrix.suite }}) with Allure output
        run: |
          mkdir -p allure-results/${{ matrix.suite }}
          if [ "${{ matrix.suite }}" = "negative" ]; then
            pytest tests/negative --alluredir=allure-results/${{ matrix.suite }}
          else
            pytest -m ${{ matrix.suite }} --alluredir=allure-results/${{ matrix.suite }}
          fi
          {
            echo "SUITE=API"
            echo "SUBSUITE=${{ matrix.suite }}"
            echo "BASE_URL=${BASE_URL}"
          } >> allure-results/${{ matrix.suite }}/environment.properties

      - name: Upload Allure results (per suite)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-api-${{ matrix.suite }}
          path: allure-results/${{ matrix.suite }}

  performance:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://localhost:8000
      PYTHONDONTWRITEBYTECODE: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install & launch mock API (no Docker)
        run: |
          python -m pip install --upgrade pip
          if [ -f apps/mock_api/requirements.txt ]; then pip install -r apps/mock_api/requirements.txt; fi
          python - <<'PY'
          import pkgutil, sys, subprocess
          for m in ["uvicorn", "fastapi"]:
              if not pkgutil.find_loader(m):
                  subprocess.check_call([sys.executable, "-m", "pip", "install", m])
          PY
          nohup uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000 >/tmp/mock_api.log 2>&1 &
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health || true)
            if [ "$code" = "200" ]; then echo "API is up"; break; fi
            sleep 1
          done
          test "$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health)" = "200"

      - name: Set up k6
        uses: grafana/setup-k6-action@v1

      - name: k6 smoke
        run: k6 run performance/smoke.js --env BASE_URL=${{ env.BASE_URL }}

      - name: Upload k6 summary
        if: always()
        run: echo "k6 smoke completed" > k6-summary.txt

  security:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://localhost:8000
      PYTHONDONTWRITEBYTECODE: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install & launch mock API (no Docker)
        run: |
          python -m pip install --upgrade pip
          if [ -f apps/mock_api/requirements.txt ]; then pip install -r apps/mock_api/requirements.txt; fi
          python - <<'PY'
          import pkgutil, sys, subprocess
          for m in ["uvicorn", "fastapi"]:
              if not pkgutil.find_loader(m):
                  subprocess.check_call([sys.executable, "-m", "pip", "install", m])
          PY
          nohup uvicorn apps.mock_api.main:app --host 0.0.0.0 --port 8000 >/tmp/mock_api.log 2>&1 &
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health || true)
            if [ "$code" = "200" ]; then echo "API is up"; break; fi
            sleep 1
          done
          test "$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/health)" = "200"

      # Run OWASP ZAP Baseline using the official action (pulls from GHCR)
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: "${{ env.BASE_URL }}/docs"
          cmd_options: "-a"
          allow_issue_writing: false

      - name: Upload ZAP artifacts (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sec-zap
          path: |
            report_html.html
            report_md.md
            report_json.json
          if-no-files-found: ignore
